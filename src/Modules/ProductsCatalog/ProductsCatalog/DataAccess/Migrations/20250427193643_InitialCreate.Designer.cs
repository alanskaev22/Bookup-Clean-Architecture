// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductsCatalog.DataAccess;

#nullable disable

namespace ProductsCatalog.DataAccess.Migrations
{
    [DbContext(typeof(ProductsCatalogDbContext))]
    [Migration("20250427193643_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("ProductsCatalog")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<Guid>("CategoriesTenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductsTenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductsId")
                        .HasColumnType("text");

                    b.HasKey("CategoriesTenantId", "CategoriesId", "ProductsTenantId", "ProductsId");

                    b.HasIndex("ProductsTenantId", "ProductsId");

                    b.ToTable("CategoryProduct", "ProductsCatalog");
                });

            modelBuilder.Entity("ProductsCatalog.Products.Models.Category", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedby")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("Name");

                    b.ToTable("Categories", "ProductsCatalog");
                });

            modelBuilder.Entity("ProductsCatalog.Products.Models.Product", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedby")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("TenantId", "Id");

                    b.ToTable("Products", "ProductsCatalog");
                });

            modelBuilder.Entity("Shared.CommonDomain.Entities.MediaResource", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AltText")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTimeOffset?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedby")
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order");

                    b.Property<string>("ProductId")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProductTenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Tenantid")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TenantId", "Id");

                    b.HasIndex("ProductTenantId", "ProductId");

                    b.HasIndex("Tenantid", "ProductId");

                    b.ToTable("ProductMediaResources", "ProductsCatalog");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("ProductsCatalog.Products.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesTenantId", "CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductsCatalog.Products.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsTenantId", "ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsCatalog.Products.Models.Product", b =>
                {
                    b.OwnsOne("Shared.CommonDomain.ValueObjects.Price", "SellingPrice", b1 =>
                        {
                            b1.Property<Guid>("ProductTenantId")
                                .HasColumnType("uuid");

                            b1.Property<string>("ProductId")
                                .HasColumnType("text");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("SellingPrice");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("Currency");

                            b1.HasKey("ProductTenantId", "ProductId");

                            b1.ToTable("Products", "ProductsCatalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductTenantId", "ProductId");
                        });

                    b.Navigation("SellingPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.CommonDomain.Entities.MediaResource", b =>
                {
                    b.HasOne("ProductsCatalog.Products.Models.Product", null)
                        .WithMany("Media")
                        .HasForeignKey("ProductTenantId", "ProductId");

                    b.HasOne("ProductsCatalog.Products.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("Tenantid", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Shared.CommonDomain.ValueObjects.Url", "Url", b1 =>
                        {
                            b1.Property<Guid>("MediaResourceTenantId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MediaResourceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Url");

                            b1.HasKey("MediaResourceTenantId", "MediaResourceId");

                            b1.ToTable("ProductMediaResources", "ProductsCatalog");

                            b1.WithOwner()
                                .HasForeignKey("MediaResourceTenantId", "MediaResourceId");
                        });

                    b.Navigation("Url")
                        .IsRequired();
                });

            modelBuilder.Entity("ProductsCatalog.Products.Models.Product", b =>
                {
                    b.Navigation("Media");
                });
#pragma warning restore 612, 618
        }
    }
}
